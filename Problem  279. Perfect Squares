class Solution:
    def numSquares(self, n: int) -> int:
        dp = [n] * (n+1)
        nums = [i**2 for i in range(1, n + 1) if i**2 <= n]
        dp[0] = 0
        for i in range(1,n+1):
            for j in range(len(nums)):
                if i>=nums[j]:
                    dp[i] = min(dp[i], dp[i-nums[j]]+1)
                
        return dp[n]
        
find

class Solution:
    def isSquare(self, n: int) -> bool:
        sq = int(math.sqrt(n))
        return sq*sq == n

    def numSquares(self, n: int) -> int:
        # four-square and three-square theorems
        while (n & 3) == 0:
            n >>= 2      # reducing the 4^k factor from number
        if (n & 7) == 7: # mod 8
            return 4

        if self.isSquare(n):
            return 1
        # check if the number can be decomposed into sum of two squares
        for i in range(1, int(n**(0.5)) + 1):
            if self.isSquare(n - i*i):
                return 2
        # bottom case from the three-square theorem
        return 3
