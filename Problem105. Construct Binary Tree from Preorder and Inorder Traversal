class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not inorder:
            return None
        rootval = preorder[0]
        root = TreeNode(rootval)
        inorder_separator = inorder.index(rootval)
        
        leftinorder = inorder[:inorder_separator]
        rightinorder = inorder[inorder_separator+1:]
        
        leftpreorder = preorder[1:len(leftinorder)+1]
        rightpreorder = preorder[len(leftinorder)+1:]
        
        root.left = self.buildTree(leftpreorder,leftinorder)
        root.right = self.buildTree(rightpreorder,rightinorder)
        
        return root
        
class Solution: smaller space
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        def helper(left, right):
            nonlocal preorder_idx 
            if left > right:
                return None
            
            val = preorder[preorder_idx]
            root = TreeNode(val)
            
            preorder_idx += 1
            
            root.left = helper(left, idx_map[val] - 1)
            root.right = helper(idx_map[val] + 1, right)
            
            return root
        
        preorder_idx = 0
        idx_map = {val:idx for idx, val in enumerate(inorder)}
        return helper(0, len(inorder) - 1)
