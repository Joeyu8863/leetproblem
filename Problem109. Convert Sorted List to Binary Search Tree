class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        ls = []
        while head:
            ls.append(head.val)
            head = head.next
            
            
        def helper(left, right):
            if left > right: return None
            center = left + (right-left)//2
            root = TreeNode(ls[center])
            root.left = helper(left, center-1)
            root.right = helper(center+1,right)
            return root
            
            
        return helper(0,len(ls)-1)
        
        
 Find
 class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        vals = []
        while head:
            vals.append(head.val)
            head = head.next
        
        def create_tree(li):
            if not li: return None
            mid = len(li)//2
            node = TreeNode(li[mid])
            node.left = create_tree(li[:mid])
            node.right = create_tree(li[mid+1:])
            return node
        return create_tree(vals)
