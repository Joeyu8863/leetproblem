
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        op1 = 0
        op2 = 0
        digis = 1
        while l1:
            op1 += l1.val*digis
            l1 = l1.next
            digis = digis*10
        digis = 1   
        while l2:
            op2 += l2.val*digis
            l2 = l2.next
            digis = digis*10   
            
        result = op1 + op2
        head = cur = ListNode(0)
        digis = 10
        if result != 0:
            while result > 0:
                cur.next = ListNode(result%digis)
                result -= result%digis
                cur = cur.next
                result = result / 10
                result =  round(result)
        else:
            cur.next = ListNode(0)

        return head.next

Find:
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        
        carry = 0
        head = node = ListNode('#')
        while l1 or l2:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            carry, rem = divmod(carry + val1 + val2, 10)
            node.next = ListNode(rem)
            node = node.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        if carry:
            node.next = ListNode(carry)
        return head.next
    
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        res = ListNode()
        cur_ind = res
        cur_digit = 0
        buf_digit = 0
        while(l1 is not None or l2 is not None):
            if(l1 is None):
                cur_digit = l2.val + buf_digit
                l2 = l2.next
            elif(l2 is None):
                cur_digit = l1.val + buf_digit
                l1 = l1.next
            else:
                cur_digit = l1.val + l2.val + buf_digit
                l1 = l1.next
                l2 = l2.next
            if cur_digit>9:
                buf_digit = 1
                cur_digit -= 10
            else:
                buf_digit = 0
            # buf_digit = 1 if cur_digit > 9 else 0 
            # cur_digit = cur_digit % 10
            
            cur_ind.next = ListNode(cur_digit)
            cur_ind = cur_ind.next
            
        if buf_digit>0:
            cur_ind.next = ListNode(buf_digit)
        
        return res.next
