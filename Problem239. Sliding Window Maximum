class Myqueue:
    def __init__(self):
        self.queue = []
        
    def pop(self,value):
        if self.queue and value == self.queue[0]:
            self.queue.pop(0)
        
    def push(self,value):
        while self.queue and value > self.queue[-1]: 
            self.queue.pop()
        self.queue.append(value)
    
    def front(self):
        return self.queue[0]
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        que = Myqueue()
        result = []
        for i in range(k):
            que.push(nums[i])
        result.append(que.front())
        for i in range(k,len(nums)):
            que.pop(nums[i-k])
            que.push(nums[i])
            result.append(que.front())
        return result
        
        two pointers
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        left = 0
        curMax = max(nums[:k])
        yield curMax
        
        for i in range(k, len(nums)):
            left +=1
            if curMax == nums[left-1]:
                if nums[left] >= curMax-1:
                    curMax = nums[left]
                else:
                    curMax = max(nums[left:i+1])
            curMax = curMax if curMax > nums[i] else nums[i]
            yield curMax
