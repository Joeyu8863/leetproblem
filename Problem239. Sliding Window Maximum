class Myqueue:
    def __init__(self):
        self.queue = []
        
    def pop(self,value):
        if self.queue and value == self.queue[0]:
            self.queue.pop(0)
        
    def push(self,value):
        while self.queue and value > self.queue[-1]: 
            self.queue.pop()
        self.queue.append(value)
    
    def front(self):
        return self.queue[0]
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        que = Myqueue()
        result = []
        for i in range(k):
            que.push(nums[i])
        result.append(que.front())
        for i in range(k,len(nums)):
            que.pop(nums[i-k])
            que.push(nums[i])
            result.append(que.front())
        return result
        
        two pointers
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        
        q = deque()
        ans = []
        for i in range(k):
            while q and nums[i] > q[-1]:
                q.pop()
            q.append(nums[i])
        ans.append(q[0])
        
        a = 0
        for b in range(k, len(nums)):
            if nums[a] == q[0]:
                q.popleft()
            while q and nums[b] > q[-1]:
                q.pop()
            q.append(nums[b])
            ans.append(q[0])
            a+=1
            
        return ans
        
