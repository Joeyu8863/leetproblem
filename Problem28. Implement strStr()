class Solution:  kmp
    def strStr(self, haystack: str, needle: str) -> int:
        l1 = len(haystack)
        l2 = len(needle)
        if l1 == 0:
            return 0
        next_ = self.getnext(l2,needle)
        tmp = -1
        for i in range(l1):
            while tmp > -1 and haystack[i] != needle[tmp+1]:
                tmp = next_[tmp]
            if haystack[i] == needle[tmp+1]:
                tmp += 1
            if tmp == l2-1:
                return i-l2+1
        
        return -1
    
    def getnext(self,l,needle):
        next_ = [''for _ in range(l)]
        p = -1
        next_[0] = p
        for i in range(1,len(needle)):
            while p > -1 and needle[p+1]!=needle[i]:
                p = next_[p]
            if  needle[p+1]==needle[i]:
                p += 1
            next_[i] = p
        return next_
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(haystack) == 0 and len(needle) == 0:
            return 0
        if len(needle) == 0:
            return 0
        a = len(needle)
        j = 0
        for i in range(0, len(haystack)):
            j = 0
            for k in range(i, len(haystack)):
                if haystack[k] == needle[j]:
                    j = j + 1
                else:
                    j = 0
                    break
                if j == len(needle):
                    return (k +1) - len(needle)
        return - 1
