class Solution:
    def isvalid(self,row,col,target,board):
        for i in range(9):
            if board[i][col]==str(target):
                return False
        for j in range(9):
            if board[row][j]== str(target):
                return False
        temprow = (row//3)*3
        tempcol = (col//3)*3
        for i in range(temprow,temprow+3):
            for j in range(tempcol,tempcol+3):
                if board[i][j] == str(target):
                    return False
        return True
    def backtracking(self,board):
        
        for i in range(9):
            for j in range(9):
                if board[i][j]!=".":
                    continue
                for k in range(1,10):
                    if self.isvalid(i,j,k,board):
                        board[i][j] = str(k)
                        if self.backtracking(board): return True
                        board[i][j] = "."
                return False
        return True
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self.backtracking(board)

        
        
        
Find
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        s = set((str(num) for num in range(1, 10)))
        colp = [s.copy() for _ in range(9)]
        rowp = [s.copy() for _ in range(9)]
        boxp = [[s.copy() for _ in range(3)] for _ in range(3)]
        unassigned = set(
            ((i, j) for i in range(9) for j in range(9) if board[i][j] == ".")
        )

        for i in range(9):
            for j in range(9):
                if (ch := board[i][j]) != ".":
                    colp[j].remove(ch)
                    rowp[i].remove(ch)
                    boxp[i // 3][j // 3].remove(ch)

        def find_min_digit_count_unassigned() -> tuple[int, int]:
            min_count = 10
            min_i, min_j = -1, -1
            for i, j in unassigned:
                union = rowp[i] & colp[j] & boxp[i // 3][j // 3]
                union_len = len(union)

                if union_len == 1:
                    return i, j
                elif union_len < min_count:
                    min_count = union_len
                    min_i, min_j = i, j

            return min_i, min_j

        def solve() -> bool:
            i, j = find_min_digit_count_unassigned()
            if i == j == -1:
                return True

            unassigned.remove((i, j))
            for ch in rowp[i] & colp[j] & boxp[i // 3][j // 3]:
                board[i][j] = ch
                rowp[i].remove(ch)
                colp[j].remove(ch)
                boxp[i // 3][j // 3].remove(ch)

                if solve():
                    return True

                board[i][j] = "."
                rowp[i].add(ch)
                colp[j].add(ch)
                boxp[i // 3][j // 3].add(ch)

            unassigned.add((i, j))
            return False

        solve()
