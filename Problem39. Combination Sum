class Solution:
    def __init__(self):
        self.path = []
        self.paths = []
    def backtrack(self,candidates,target,start,sum_):
        if sum_ > target:
            return
        if sum_ == target:
            self.paths.append(self.path[:])
            return
        
        for i in range(start,len(candidates)):
            self.path.append(candidates[i])
            sum_ += candidates[i]
            self.backtrack(candidates,target,i,sum_)
            sum_ -= candidates[i]
            self.path.pop()
            
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        self.backtrack(candidates,target,0,0)
        return self.paths
