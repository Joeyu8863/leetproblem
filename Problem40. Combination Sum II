class Solution:
    def __init__(self):
        self.paths = []
        self.path = []
    def backtrack(self,candidates,target,sum_,start):
        if sum_ == target:
            self.paths.append(self.path[:])
            return
            
        for i in range(start,len(candidates)):
            if sum_ + candidates[i] > target:
                return
            if i>start and candidates[i] == candidates[i-1]:
                continue
            self.path.append(candidates[i])
            sum_ += candidates[i]
            self.backtrack(candidates,target,sum_,i+1)
            sum_ -= candidates[i]
            self.path.pop()
            
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        self.backtrack(candidates,target,0,0)
        return self.paths
