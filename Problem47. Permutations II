class Solution:
    def __init__(self):
        self.path = []
        self.paths = []
    def backtracking(self,nums,used):
        if len(self.path) == len(nums):
            self.paths.append(self.path[:])
            return
            
        for i in range(len(nums)):
            if not used[i]:
                if i>0 and nums[i]== nums[i-1] and not used[i-1]:
                    continue
                used[i] = True
                self.path.append(nums[i])
                self.backtracking(nums,used)
                self.path.pop()
                used[i] = False
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        used = [False]*8
        self.backtracking(sorted(nums),used)
        return self.paths
