class Solution(object): n^2
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        res = ""
        for i in range(len(s)):
            res = max(self.helper(s,i,i),self.helper(s,i,i+1),res,key = len)
            
        return res
    
    def helper(self,s,l,r):
        while l>=0 and r < len(s) and s[l] == s[r]:
            l -= 1 
            r += 1
        return s[l+1:r]
        
        
Find
class Solution(object):  n
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        maxx=1
        start=0
        if len(s) <= 1 or s == s[::-1]:
            return s
        else:
            for i in range(1,len(s)):
                odd=s[i-maxx-1:i+1]
                even=s[i-maxx:i+1]
                if odd==odd[::-1] and i-maxx-1>=0:
                    start=i-maxx-1
                    maxx=maxx+2
                elif even==even[::-1]:
                    start=i-maxx
                    maxx=maxx+1
        return s[start:start+maxx]
