class Solution:
    def __init__(self):
        self.path = []
    def isvalid(self,row,col,chessboard,n):
        for i in range(n):
            if chessboard[i][col] == 'Q':
                return False
        i = row - 1
        j = col -1
        while i>=0 and j>=0:
            if chessboard[i][j] == 'Q':
                return False
            i -= 1
            j -= 1
        i = row - 1
        j = col + 1
        while i >= 0 and j < n:
            if chessboard[i][j] == 'Q':
                return False
            i -= 1
            j += 1
        return True
            
    def backtracking(self,n,row,chessboard):
        if row == n:
            temp_res = []
            for temp in chessboard:
                    temp_str = "".join(temp)
                    temp_res.append(temp_str)
            self.path.append(temp_res[:])
            return
        for col in range(n):
            if not self.isvalid(row,col,chessboard,n):
                continue
            chessboard[row][col] = 'Q'
            self.backtracking(n,row+1,chessboard)
            chessboard[row][col] = '.'
                
        
    def solveNQueens(self, n: int) -> List[List[str]]:
        chessboard = [['.'] * n for _ in range(n)]
        self.backtracking(n,0,chessboard)
        return self.path
        
        
        
        
Find
from copy import deepcopy

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        cols = set()
        posDiag = set()
        negDiag = set()
        res = []
        board = [["."]*n for i in range(n)]
        
        def backtrack(row):
            if row == n:
                copy  = ["".join(row) for row in board]
                res.append(copy)
                return
            
            for col in range(n):
                if (col in cols )or ((row + col) in posDiag) or (row - col in negDiag):
                    continue
                board[row][col] = 'Q'
                cols.add(col)
                posDiag.add(row + col)
                negDiag.add(row - col)
                
                backtrack(row + 1)
                
                board[row][col] = '.'
                cols.remove(col)
                posDiag.remove(row + col)
                negDiag.remove(row - col)
        backtrack(0)
        return res
