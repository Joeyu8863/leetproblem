class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        row = len(obstacleGrid)
        col = len(obstacleGrid[0])
        if  obstacleGrid[0][0] == 1:
            return 0
        
        obstacleGrid[0][0] = 1
        for i in range(1,row):
            obstacleGrid[i][0] = int(obstacleGrid[i-1][0]==1 and obstacleGrid[i][0]==0)
        for j in range(1,col):
            obstacleGrid[0][j] = int(obstacleGrid[0][j-1]==1 and obstacleGrid[0][j]==0)
            
        for i in range(1,row):
            for j in range(1,col):
                if obstacleGrid[i][j] == 0:
                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]
                    
                else:
                    obstacleGrid[i][j] = 0
                    
                    
        return obstacleGrid[-1][-1]
        
        
  find
  class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        row = len(obstacleGrid);
        col = len(obstacleGrid[0]);
        
        dp = [[0]*col for _ in range(row)]
        if obstacleGrid[0][0]==1:
            return 0
        dp[0][0] = 1
        for i in range(row):
            for j in range(col):
                if obstacleGrid[i][j]==1:
                    dp[i][j] = 0
                else:
                    if i>0:
                        dp[i][j] +=dp[i-1][j]
                    if j>0:
                        dp[i][j] += dp[i][j-1]
                        
        return dp[row-1][col-1]
