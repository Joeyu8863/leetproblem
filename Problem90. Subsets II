class Solution:
    def __init__(self):
        self.path: List[int] = []
        self.paths: List[List[int]] = []
    def backtracking(self,nums,start):
        self.paths.append(self.path[:])
        if start == len(nums):
            return
        for i in range(start,len(nums)):
            if i>start and nums[i]==nums[i-1]:
                continue
            self.path.append(nums[i])
            self.backtracking(nums,i+1)
            self.path.pop()
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        self.backtracking(nums,0)
        return self.paths
