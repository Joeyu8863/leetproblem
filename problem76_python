class Solution:
    def minWindow(self, s: str, t: str) -> str:
        res = ""
        freq = [1] * len(t)
        index = {}
        curStr = ""
        left = right = 0
        while right > len(s):
            if s[right] in t:
                if freq[t.find(s[right])] == 1
                    freq[t.find(s[right])] = 0
                else:
                    while (s[left] in t) and (s[left] != s[right]):
                        left += 1
            right += 1   
            if len(res) > right - left + 1:
                res = [left:right+1]
                
                
 Find best:
 class Solution:
    def minWindow(self, s: str, t: str) -> str:
        t_map = {}
        for i in t:
            t_map[i] = t_map.get(i, 0) + 1
        smallest = ""
        left = 0
        unique = len(t_map)
        for right in range(len(s)):
            right_character = s[right]
            if right_character in t_map:
                t_map[right_character] -= 1
                if t_map[right_character] == 0:
                    unique -= 1
            if unique == 0:
                while left <= right:
                    left_character = s[left]
                    if left_character in t_map:
                        if t_map[left_character] < 0:
                            t_map[left_character] += 1
                        elif t_map[left_character] == 0:
                            if smallest:
                                if right - left + 1 < len(smallest):
                                    smallest = s[left:right + 1]
                            else:
                                smallest = s[left:right + 1]
                            unique = 1
                            t_map[left_character] += 1
                            left +=1
                            break
                    left += 1
        return smallest
